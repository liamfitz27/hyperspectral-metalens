#%%
import numpy as np
import matplotlib.pyplot as plt
from pywt import dwt2, idwt2
from psf_model import focus_phase, rs_psf_fftconv
from image_model import psf_spect_convolve, phi_matrix_full
import matplotlib as mpl
mpl.rcParams["backend"] = "qtagg"
%matplotlib auto


def DWT_dict(n, nf, type):
    dwt_dict = np.zeros((n**2*nf, n, n, nf))
    for i in range(n):
        for j in range(n):
            for k in range(nf):
                ns = n//2
                coeff1 = np.ndarray.flatten(np.zeros((ns,ns)))
                coeff2 = np.ndarray.flatten(np.zeros((3, ns, ns)))
                coeff = np.append(coeff1, coeff2)
                ii = i*n + j
                coeff[ii] = 1
                basis_ijk = np.zeros((n,n,nf))
                coeff = (np.reshape(coeff[:ns**2], (ns, ns)), np.reshape(coeff[ns**2:], (3, ns, ns)))
                basis_ijk[:,:,k] = idwt2(coeff, type)
                basis_ijk = np.ndarray.flatten(basis_ijk)
                dwt_dict[:, i, j, k] = basis_ijk
    return np.reshape(dwt_dict, (n**2*nf, n**2*nf))

def mutual_coherence(phi):
    mc = np.max(phi @ phi.T)
    print(np.shape(mc))
    return np.max(mc)

#%%
# CHOOSE PARAMETERS
wvl_rgb = np.array([0.8, 1.0, 1.3])
focl = 40
sx = 20
res = 1/0.4
x = np.linspace(-sx, sx, int(2*sx*res)+1)
xx, yy = np.meshgrid(x, x)

# CALC RANDOM PHASE, FIND BEST MATCH FROM DATA
c0 = focus_phase(x, x, focl, wvl_rgb)

psf_spect = rs_psf_fftconv(x, x, [focl], wvl_rgb, c0, pad=20)
psf_spect = np.abs(psf_spect[:,:,0,:])**2

plt.imshow(psf_spect)